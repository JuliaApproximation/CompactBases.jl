#=
# Snippet used to generate reference derivatives
using AnalyticBSplines
function analytic_derivatives(kl, kr, a, b, N,
                              mll=kl, mlr=kl,
                              mrl=kr, mrr=kr)
    tl = LinearKnotSet(kl, a//1, b//1, N, mll, mlr)
    tr = LinearKnotSet(kr, a//1, b//1, N, mrl, mrr)

    L = gen_basis(tl, mll==kl ? 1//1 : 0, mlr==kl ? 1//1 : 0)
    R = gen_basis(tr, mrr==kr ? 1//1 : 0, mrr==kr ? 1//1 : 0)

    [derop(L, R, tl, o) for o=1:min(kl,kr)-1]
end
=#

@testset "Derivatives" begin
    @testset "Derivative operators" begin
        @testset "k = 3" begin
            @testset "One basis" begin
                k = 3
                t = LinearKnotSet(k, 0, 1, 2)
                B = BSpline(t)
                D = Derivative(axes(B,1))

                @test B'D*B ≈ [  -1//2    5//12   1//12   0
                                 -5//12   0//1    1//3   1//12
                                 -1//12  -1//3    0//1   5//12
                                 0     -1//12  -5//12  1//2]

                @test B'D'D*B ≈ [ -8//3   2//1   2//3    0
                                  2//1  -8//3   0//1   2//3
                                  2//3   0//1  -8//3   2//1
                                  0     2//3   2//1  -8//3]
            end
            @testset "kl = 3, kr = 4" begin
                tl = LinearKnotSet(3, 0, 1, 2)
                tr = LinearKnotSet(4, 0, 1, 2)

                N = max(CompactBases.num_quadrature_points(3,1),
                        CompactBases.num_quadrature_points(4,1))

                L = BSpline(tl, N)
                R = BSpline(tr, N)
                D = Derivative(axes(R,1))

                @test L'D*R ≈ [ -3//5   17//40   3//20    1//40  0//1
                                -7//20  -3//20   1//5     1//4   1//20
                                -1//20  -1//4   -1//5     3//20  7//20
                                0//1   -1//40  -3//20  -17//40  3//5 ]

                @test L'D'D*R ≈ [ -3//1   7//4   1//1   1//4   0//1
                                  5//2  -5//2  -1//1   1//2   1//2
                                  1//2   1//2  -1//1  -5//2   5//2
                                  0//1   1//4   1//1   7//4  -3//1]
            end
            @testset "kl = 4, kr = 3" begin
                tl = LinearKnotSet(4, 0, 1, 2)
                tr = LinearKnotSet(3, 0, 1, 2)

                N = max(CompactBases.num_quadrature_points(4,1),
                        CompactBases.num_quadrature_points(3,1))

                L = BSpline(tl, N)
                R = BSpline(tr, N)
                D = Derivative(axes(R,1))

                @test L'D*R ≈ [  -2//5    7//20   1//20   0//1
                                 -17//40   3//20   1//4    1//40
                                 -3//20  -1//5    1//5    3//20
                                 -1//40  -1//4   -3//20  17//40
                                 0//1   -1//20  -7//20   2//5]

                @test L'D'D*R ≈ [ -3//1   5//2   1//2   0//1
                                  7//4  -5//2   1//2   1//4
                                  1//1  -1//1  -1//1   1//1
                                  1//4   1//2  -5//2   7//4
                                  0//1   1//2   5//2  -3//1]
            end
        end
        @testset "k = 7" begin
            k = 7
            t = LinearKnotSet(k, 0, 1, 3)
            B = BSpline(t)
            D = Derivative(axes(B,1))

            @test B'D*B ≈ [      -1//2          10625//29568     283021//2395008    23827//1197504     479//199584        5//27216          1//149688         0                0
                                 -10625//29568          0//1          35867//177408    118891//1064448   26167//709632    11017//1419264     7141//8515584       1//946176         0
                                 -283021//2395008   -35867//177408         0//1           5129//39424     11645//101376   245743//4257792    20455//1216512    7141//8515584       1//149688
                                 -23827//1197504  -118891//1064448    -5129//39424          0//1         11035//118272   218689//2128896   245743//4257792   11017//1419264       5//27216
                                 -479//199584    -26167//709632    -11645//101376    -11035//118272        0//1         11035//118272     11645//101376    26167//709632      479//199584
                                 -5//27216     -11017//1419264  -245743//4257792  -218689//2128896  -11035//118272        0//1           5129//39424    118891//1064448   23827//1197504
                                 -1//149688     -7141//8515584   -20455//1216512  -245743//4257792  -11645//101376    -5129//39424          0//1         35867//177408   283021//2395008
                                 0               -1//946176     -7141//8515584   -11017//1419264  -26167//709632  -118891//1064448   -35867//177408        0//1         10625//29568
                                 0                 0               -1//149688        -5//27216      -479//199584   -23827//1197504  -283021//2395008  -10625//29568         1//2]

            @test B'D'D*B ≈ [   -108//11       16509//2464      169651//66528      2347//4752        377//5544         7//1188           1//4158            0                0
                                16509//2464     -4413//616      -104639//133056   191011//266112    72047//177408  118771//1064448    31501//2128896        3//78848          0
                                169651//66528  -104639//133056    -46861//22176    -16405//29568     58403//177408   45935//118272    121843//709632     31501//2128896       1//4158
                                2347//4752    191011//266112    -16405//29568     -3083//3168     -36415//88704    39203//177408     45935//118272    118771//1064448       7//1188
                                377//5544     72047//177408     58403//177408   -36415//88704     -5807//7392    -36415//88704      58403//177408     72047//177408      377//5544
                                7//1188    118771//1064448    45935//118272    39203//177408   -36415//88704    -3083//3168      -16405//29568     191011//266112     2347//4752
                                1//4158     31501//2128896   121843//709632    45935//118272    58403//177408  -16405//29568     -46861//22176    -104639//133056   169651//66528
                                0              3//78848      31501//2128896  118771//1064448   72047//177408  191011//266112   -104639//133056     -4413//616       16509//2464
                                0               0                1//4158          7//1188        377//5544      2347//4752      169651//66528      16509//2464       -108//11]

            @test CompactBases.diffop!(similar(B.S), B, B, 1, 2) ≈
                [    162//1     -49527//224     93901//2016    10723//1008     41//24        43//252        1//126          0             0
                     -23049//224      162//1      -78221//1344   -13759//2688   4773//1792    2023//1536    5039//21504       9//7168        0
                     -93901//2016   78221//1344        0//1       -9741//896    -905//256     4079//3584   10065//7168     5039//21504      1//126
                     -10723//1008   13759//2688     9741//896         0//1     -4621//896    -5055//1792    4079//3584     2023//1536      43//252
                     -41//24     -4773//1792      905//256      4621//896       0//1      -4621//896     -905//256      4773//1792      41//24
                     -43//252    -2023//1536    -4079//3584     5055//1792   4621//896        0//1      -9741//896    -13759//2688   10723//1008
                     -1//126    -5039//21504  -10065//7168    -4079//3584    905//256     9741//896        0//1      -78221//1344   93901//2016
                     0           -9//7168    -5039//21504   -2023//1536  -4773//1792   13759//2688   78221//1344     -162//1      23049//224
                     0             0            -1//126       -43//252     -41//24    -10723//1008  -93901//2016    49527//224     -162//1]

            @test CompactBases.diffop!(similar(B.S), B, B, 2, 2) ≈
                [    2700//1    -406215//112     232415//336      32465//168     1045//28       185//42          5//21            0               0
                     -406215//112   141615//28     -781435//672    -354385//1344  -16085//896    56255//5376    34625//10752      135//3584          0
                     232415//336  -781435//672      57055//112       7365//448   -45905//896   -25215//1792    25535//3584     34625//10752        5//21
                     32465//168  -354385//1344      7365//448       8255//112      595//64     -3815//128    -25215//1792     56255//5376       185//42
                     1045//28    -16085//896     -45905//896        595//64      5055//112      595//64     -45905//896     -16085//896       1045//28
                     185//42     56255//5376    -25215//1792     -3815//128      595//64      8255//112      7365//448    -354385//1344     32465//168
                     5//21     34625//10752    25535//3584    -25215//1792  -45905//896     7365//448     57055//112    -781435//672     232415//336
                     0          135//3584     34625//10752    56255//5376  -16085//896  -354385//1344  -781435//672     141615//28     -406215//112
                     0             0              5//21         185//42      1045//28     32465//168    232415//336    -406215//112       2700//1]

            @test CompactBases.diffop!(similar(B.S), B, B, 2, 3) ≈
                [  -36450//1    6885405//112   -3209175//112     158535//56      19305//28       1395//14          45//7             0               0
                   5361795//112  -164025//2      8973045//224   -2228985//448   -866295//896     -3375//256     127305//3584      3645//3584          0
                   -873225//112  3274155//224     -18225//2      1109295//448     26325//896   -421605//1792    -10125//512     127305//3584        45//7
                   -158535//56   2228985//448   -1109295//448          0//1      202095//448     26325//896    -421605//1792     -3375//256       1395//14
                   -19305//28    866295//896     -26325//896    -202095//448         0//1      202095//448      26325//896    -866295//896      19305//28
                   -1395//14      3375//256     421605//1792    -26325//896   -202095//448         0//1      1109295//448   -2228985//448     158535//56
                   -45//7    -127305//3584     10125//512     421605//1792   -26325//896  -1109295//448      18225//2     -3274155//224     873225//112
                   0        -3645//3584   -127305//3584      3375//256    866295//896   2228985//448   -8973045//224     164025//2     -5361795//112
                   0             0            -45//7        -1395//14     -19305//28    -158535//56     3209175//112   -6885405//112      36450//1]

            @test CompactBases.diffop!(similar(B.S), B, B, 3, 3) ≈
                [ -3499200//7   1673055//2     -759645//2     215595//7       72090//7      13500//7        1080//7            0              0
                  1673055//2  -9863370//7    18273735//28   -474525//8    -2080485//112   -79245//32     105435//448     10935//448          0
                  -759645//2  18273735//28   -4495905//14   2229525//56     157545//16   -176175//224   -419985//448    105435//448      1080//7
                  215595//7   -474525//8     2229525//56   -186705//14      26325//56    325215//112   -176175//224    -79245//32      13500//7
                  72090//7  -2080485//112    157545//16     26325//56     -57105//14     26325//56     157545//16   -2080485//112     72090//7
                  13500//7    -79245//32    -176175//224   325215//112     26325//56   -186705//14    2229525//56    -474525//8      215595//7
                  1080//7    105435//448   -419985//448  -176175//224    157545//16   2229525//56   -4495905//14   18273735//28    -759645//2
                  0       10935//448    105435//448   -79245//32   -2080485//112  -474525//8    18273735//28   -9863370//7     1673055//2
                  0            0          1080//7      13500//7       72090//7     215595//7     -759645//2     1673055//2    -3499200//7]
        end
    end

    @testset "Derivative accuracy" begin
        @info "B-splines derivative accuracy"
        f,g,h,a,b = derivative_test_functions(1)
        Ns = ceil.(Int, 10 .^ range(2, stop=3, length=10))
        @testset "k = $k" for k = 3:6
            @show k
            hs,ϵg,ϵh,ϵh′,pg,ph,ph′ = compute_derivative_errors(Ns, f, g, h, 1) do N
                t = LinearKnotSet(k, a, b, N)
                BSpline(t), 1
            end
            # These requirements are not derived, but empirical
            # results, mainly to ensure not regression occurs.
            @test pg > k + 3
            @test ph > k + (k > 3 && k < 6 ? 3 : 1)
            @test ph′ > k + (k > 3 && k < 6 ? 2 : 1)
        end
    end

    @testset "Hooke's law" begin
        function ode_hookes_law(xₘₐₓ, kspring, k, N)
            t = LinearKnotSet(k, 0, xₘₐₓ, N)
            # By omitting the first basis function, we enforce V(0) = 0
            B = BSpline(t,k′=1)[:,2:end]
            S = B'B

            x = axes(B,1)

            D = Derivative(x)
            ∇ = B'*D*B

            # Hooke's law
            F = x -> -kspring*x

            # Expand Hooke's law on B-splines
            cF = B \ F.(x)
            # Solve for expansion coefficients of potential
            cV = -∇ \ S*cF

            B,cF,cV
        end

        kspring = 0.1
        @testset "k=3" begin
            @test last(ode_hookes_law(3, kspring, 3, 1)) ≈ [0, 0.45] atol=1e-15
        end
        @testset "k=7" begin
            B,cF,cV = ode_hookes_law(3, kspring, 7, 30)
            @test cV ≈ (B \ (x -> kspring*x^2/2).(axes(B,1)))
        end
    end
end
